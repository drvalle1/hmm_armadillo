for(i in 1:ngibbs){
b1 = sample.b1(x=dat$con,z)
z=sample.z(b1,x=dat$con,y,t1,t2)
vec=sample.t(z,y)
t1=vec[1]
t2=vec[2]
results[i,] = c(b1,t1,t2)
}
head(results)
plot(results[,1],type='l')
#simulated data
set.seed(1)
n.con = 100
con = rep(c(0,62.5,125,250,500), each=n.con)
b1 = -0.02
z = rnorm(length(con), mean=b1*con, sd=1)
plot(con,z)
t1=-4.5#quantile(z,1/3)
t2=-1.5#quantile(z,2/3)
y = rep(NA, length(con))
y[z<t1]=0
y[z>t1&z<t2]=1
y[z>t2]=2
dat=data.frame(y=y,con=con)
#FCD for beta1
sample.b1 = function(x,z)
{sigma2 = (sum(x^2) + 1/10)^(-1)
b1 = rnorm(1,sigma2*sum(x*z),sd=sqrt(sigma2))
b1
}
#generates truncated normal variates based on cumulative normal distribution
tnorm <- function(n,lo,hi,mu,sig){
q1 <- pnorm(lo,mu,sig) #cumulative distribution
q2 <- pnorm(hi,mu,sig) #cumulative distribution
z <- runif(n,q1,q2)
z <- qnorm(z,mu,sig)
z[z == -Inf]  <- lo[z == -Inf]
z[z == Inf]   <- hi[z == Inf]
z
}
#FCD for zs
sample.z = function(b1, x, y, t1, t2){
z = y
z[y==0] = tnorm(n=sum(y==0), lo=-Inf, hi=t1, mu=b1*x[y==0], sig=1)
z[y==1] = tnorm(n=sum(y==1), lo=t1, hi=t2, mu=b1*x[y==1], sig=1)
z[y==2] = tnorm(n=sum(y==2), lo=t2, hi=Inf, mu=b1*x[y==2], sig=1)
z
}
#FCD for t1 and t2
sample.t=function(z,y){
cond1=(y==0)
cond2=(y==1)
cond3=(y==2)
t1=runif(1, max(z[cond1]), min(z[cond2]))
t2=runif(1, max(z[cond2]), min(z[cond3]))
c(t1, t2)
}
#Gibbs sampler
#Initial values
ngibbs=10000
#N = length(dat$con)
b1 = 0
z = dat$y
t1 = 0.5
t2 = 1.5
results = matrix(NA, ngibbs, 3)
for(i in 1:ngibbs){
b1 = sample.b1(x=dat$con,z)
z=sample.z(b1,x=dat$con,y,t1,t2)
vec=sample.t(z,y)
t1=vec[1]
t2=vec[2]
results[i,] = c(b1,t1,t2)
}
plot(results[,1],type='l')
plot(results[,2],type='l')
plot(results[,3],type='l')
tuesday='bayes6560'
vec=c('socialscienceblade','baysocc','popeco',
'6560project','bayestrials')
sample(vec,size=length(vec))
rm(list=ls())
set.seed(111)
rm(list=ls())
set.seed(111)
b0=0
b1=0.1
x=seq(from=-5,to=5,length.out=100)
mu=exp(b0+b1*x)
n=0.5
p=n/(mu+n)
denom=1-(p^n)
ey=mu/denom
plot(x,ey)
plot(x,ey,ylim=range(c(ey,mu)))
points(x,mu,col='red')
0.1^0.1
range(denom)
range(1/denom)
hist(ey/mu)
rm(list=ls())
set.seed(111)
b0=0
b1=0.1
x=seq(from=-5,to=5,length.out=100)
mu=exp(b0+b1*x)
n=0.5
p=n/(mu+n)
denom=1-(p^n)
range(1/denom)
ey=mu/denom
plot(x,ey,ylim=range(c(ey,mu)))
points(x,mu,col='red')
rm(list=ls())
set.seed(111)
b0=0
b1=1
x=seq(from=-5,to=5,length.out=100)
mu=exp(b0+b1*x)
n=0.5
p=n/(mu+n)
denom=1-(p^n)
range(1/denom)
ey=mu/denom
plot(x,ey,ylim=range(c(ey,mu)))
points(x,mu,col='red')
rm(list=ls())
set.seed(111)
b0=2
b1=-0.1
x=seq(from=-5,to=5,length.out=100)
mu=exp(b0+b1*x)
n=0.5
p=n/(mu+n)
denom=1-(p^n)
range(1/denom)
ey=mu/denom
plot(x,ey,ylim=range(c(ey,mu)))
points(x,mu,col='red')
0.0001^0.1
?image_convert
?rnbinom
Sys.which("make")
library('devtools')
install_github('drvalle1/EcoCluster',build_vignettes=T)
?EcoCluster::gibbs.SAM()
?EcoCluster::mixture.gibbs
browseVignettes("EcoCluster")
vignette("EcoCluster")
15*15
x=seq(from=-100,to=1000,length.out=1000)
y=500-x
plot(x,y)
x=seq(from=-100,to=1000,length.out=1000)
y1=500-x
y2=(x-100)*(1/3)
plot(x,y1,type='l',ylim=c(0,1000))
lines(x,y2,col='red')
abline(v=400,col='blue')
rect(20,40,70,90,-100)
rect(20,40,70,90,-90000000000000);
?rect
rect(20,40,70,90,col='blue');
rect(20,40,70,90,col='blood red');
rect(20,40,70,90,col='yellow');
rect(20,40,70,90,col='indigo');
rect(20,40,70,90,col='cyan');
x1=seq(from=-1,to=1,length.out=100)
ngroup=2
nparam=2
betas=matrix(c(0,1,0,2),nparam,ngroup)
x1=seq(from=-1,to=1,length.out=100)
ngroup=3
nparam=2
betas=matrix(c(0,1,0,2,0,3),nparam,ngroup)
betas
x1=seq(from=-1,to=1,length.out=100)
ngroup=3
nparam=2
betas=matrix(c(0,1,0,2,0,3),nparam,ngroup)
tmp1=exp(betas[1,1]+betas[2,1]*x1)
tmp2=exp(betas[1,2]+betas[2,2]*x1)
rm(list=ls(all=TRUE))
set.seed(1)
#import data
setwd('U:\\GIT_models\\hmm_armadillo')
source('gibbs hmm aux functions.R')
source('gibbs hmm main function.R')
dat=read.csv('fake data.csv',as.is=T)
nobs=nrow(dat)
#priors
var.mu=100
sig2.a=0.1; sig2.b=0.1
gamma1=0.1
#initialize parameters
max.group=10
#MCMC stuff
ngibbs=10000
nburn=ngibbs/2
nburn=ngibbs/2
mod=hmm.main.function(dat=dat,var.mu=var.mu,sig2.a=sig2.a,sig2.b=sig2.b,
gamma1=gamm1,max.group=max.group,
ngibbs=ngibbs,nburn=nburn)
rm(list=ls(all=TRUE))
set.seed(1)
#import data
setwd('U:\\GIT_models\\hmm_armadillo')
source('gibbs hmm aux functions.R')
source('gibbs hmm main function.R')
dat=read.csv('fake data.csv',as.is=T)
nobs=nrow(dat)
#priors
var.mu=100
sig2.a=0.1; sig2.b=0.1
gamma1=0.1
#initialize parameters
max.group=10
#MCMC stuff
ngibbs=10000
nburn=ngibbs/2
nburn=ngibbs/2
mod=hmm.main.function(dat=dat,var.mu=var.mu,sig2.a=sig2.a,sig2.b=sig2.b,
gamma1=gamma1,max.group=max.group,
ngibbs=ngibbs,nburn=nburn)
plot(theta,type='h')
str(mod)
plot(mod$theta[ngibbs,],type='h')
plot(mod$theta,type='h')
compare1=function(true,estim){
rango=range(c(true,estim))
plot(true,estim,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
}
estim.mu.ak=mod$mu.ak[1:4]
estim.mu.sk=mod$mu.sk[1:4]
estim.sd.sk=sqrt(mod$sig2.sk[1:4])
estim.sd.ak=sqrt(mod$sig2.ak[1:4])
estim.mu.ak
ordem=c(2,4,3,1)
par(mfrow=c(2,2))
compare1(true=mu.SL.true,estim=estim.mu.sk[ordem])
compare1(true=mu.TA.true,estim=estim.mu.ak[ordem])
compare1(true=sd.SL.true,estim=estim.sd.sk[ordem])
compare1(true=sd.TA.true,estim=estim.sd.ak[ordem])
set.seed(1)
#parameters
nobs=10000
ngroup=4
mu.SL.true=mu.SL=c(-2,0,1,2)
sd.SL.true=sd.SL=c(1,0.5,0.5,0.5)
mu.TA.true=mu.TA=c(2,0.5,-1,-2)
sd.TA.true=sd.TA=c(0.3,2,0.3,0.3)
ordem=c(2,4,3,1)
par(mfrow=c(2,2))
compare1(true=mu.SL.true,estim=estim.mu.sk[ordem])
compare1(true=mu.TA.true,estim=estim.mu.ak[ordem])
compare1(true=sd.SL.true,estim=estim.sd.sk[ordem])
compare1(true=sd.TA.true,estim=estim.sd.ak[ordem])
rm(list=ls(all=TRUE))
set.seed(1)
#import data
setwd('U:\\GIT_models\\hmm_armadillo')
source('gibbs hmm aux functions.R')
source('gibbs hmm main function.R')
dat=read.csv('fake data.csv',as.is=T)
nobs=nrow(dat)
#priors
var.mu=100
sig2.a=0.1; sig2.b=0.1
gamma1=0.1
#initialize parameters
max.group=10
#MCMC stuff
ngibbs=3000
nburn=ngibbs/2
nburn=ngibbs/2
mod=hmm.main.function(dat=dat,var.mu=var.mu,sig2.a=sig2.a,sig2.b=sig2.b,
gamma1=gamma1,max.group=max.group,
ngibbs=ngibbs,nburn=nburn)
plot(mod$theta,type='h')
plot(mod$theta[ngibbs,],type='h')
compare1=function(true,estim){
rango=range(c(true,estim))
plot(true,estim,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
}
estim.mu.ak=mod$mu.ak[ngibbs,1:4]
estim.mu.sk=mod$mu.sk[ngibbs,1:4]
estim.sd.sk=sqrt(mod$sig2.sk[ngibbs,1:4])
estim.sd.ak=sqrt(mod$sig2.ak[ngibbs,1:4])
estim.mu.ak
set.seed(1)
#parameters
nobs=10000
ngroup=4
mu.SL.true=mu.SL=c(-2,0,1,2)
sd.SL.true=sd.SL=c(1,0.5,0.5,0.5)
mu.TA.true=mu.TA=c(2,0.5,-1,-2)
sd.TA.true=sd.TA=c(0.3,2,0.3,0.3)
ordem=c(2,4,3,1)
par(mfrow=c(2,2))
compare1(true=mu.SL.true,estim=estim.mu.sk[ordem])
compare1(true=mu.TA.true,estim=estim.mu.ak[ordem])
compare1(true=sd.SL.true,estim=estim.sd.sk[ordem])
compare1(true=sd.TA.true,estim=estim.sd.ak[ordem])
rm(list=ls(all=TRUE))
set.seed(1)
#parameters
nobs=10000
ngroup=4
mu.SL.true=mu.SL=c(-2,0,1,2)
sd.SL.true=sd.SL=c(1,0.5,0.5,0.5)
mu.TA.true=mu.TA=c(2,0.5,-1,-2)
sd.TA.true=sd.TA=c(0.3,2,0.3,0.3)
#get group assignments
tmp=rmultinom(nobs,size=1,prob=rep(1/ngroup,ngroup))
ind=rep(NA,nobs)
for (i in 1:nobs){
ind[i]=which(tmp[,i]==1)
}
#get SL
fim=data.frame(log.SL=rep(NA,nobs),
logit.TA=rep(NA,nobs))
fim$log.SL=rnorm(nobs,mean=mu.SL[ind],sd=sd.SL[ind])
#look at SL
par(mfrow=c(2,2))
rango=range(exp(fim$log.SL))
for (i in 1:ngroup) hist(exp(fim$log.SL[ind==i]),xlim=rango)
#get TA
fim$logit.TA=rnorm(nobs,mean=mu.TA[ind],sd=sd.TA[ind])
#look at TA
tmp=exp(fim$logit.TA)
prob=tmp/(1+tmp)
par(mfrow=c(2,2))
rango=c(0,1)
for (i in 1:ngroup) hist(prob[ind==i],xlim=rango)
head(fim)
ind=rbinom(nobs,size=1,prob=0.01)
fim[ind==1,1]=NA
ind=rbinom(nobs,size=1,prob=0.01)
fim[ind==1,2]=NA
k=apply(is.na(fim),1,sum)
table(k)
head(fim)
rm(list=ls(all=TRUE))
set.seed(1)
#parameters
nobs=10000
ngroup=4
mu.SL.true=mu.SL=c(-2,0,1,2)
sd.SL.true=sd.SL=c(1,0.5,0.5,0.5)
mu.TA.true=mu.TA=c(2,0.5,-1,-2)
sd.TA.true=sd.TA=c(0.3,2,0.3,0.3)
#get group assignments
tmp=rmultinom(nobs,size=1,prob=rep(1/ngroup,ngroup))
ind=rep(NA,nobs)
for (i in 1:nobs){
ind[i]=which(tmp[,i]==1)
}
#get SL
fim=data.frame(log.SL=rep(NA,nobs),
logit.TA=rep(NA,nobs))
fim$log.SL=rnorm(nobs,mean=mu.SL[ind],sd=sd.SL[ind])
#look at SL
par(mfrow=c(2,2))
rango=range(exp(fim$log.SL))
for (i in 1:ngroup) hist(exp(fim$log.SL[ind==i]),xlim=rango)
#get TA
fim$logit.TA=rnorm(nobs,mean=mu.TA[ind],sd=sd.TA[ind])
#look at TA
tmp=exp(fim$logit.TA)
prob=tmp/(1+tmp)
par(mfrow=c(2,2))
rango=c(0,1)
for (i in 1:ngroup) hist(prob[ind==i],xlim=rango)
#plug in NA's
ind=rbinom(nobs,size=1,prob=0.01)
fim[ind==1,1]=NA
ind=rbinom(nobs,size=1,prob=0.01)
fim[ind==1,2]=NA
k=apply(is.na(fim),1,sum)
fim1=fim[k!=2,]
#export results
setwd('U:\\GIT_models\\hmm_armadillo')
write.csv(fim1,'fake data.csv',row.names=F)
rm(list=ls(all=TRUE))
set.seed(1)
#import data
setwd('U:\\GIT_models\\hmm_armadillo')
source('gibbs hmm aux functions.R')
source('gibbs hmm main function.R')
dat=read.csv('fake data.csv',as.is=T)
nobs=nrow(dat)
#priors
var.mu=100
sig2.a=0.1; sig2.b=0.1
gamma1=0.1
#initialize parameters
max.group=10
#MCMC stuff
ngibbs=3000
nburn=ngibbs/2
nburn=ngibbs/2
rm(list=ls(all=TRUE))
set.seed(1)
#import data
setwd('U:\\GIT_models\\hmm_armadillo')
source('gibbs hmm aux functions.R')
source('gibbs hmm main function.R')
dat=read.csv('fake data.csv',as.is=T)
nobs=nrow(dat)
#priors
var.mu=100
sig2.a=0.1; sig2.b=0.1
gamma1=0.1
#initialize parameters
max.group=10
#MCMC stuff
ngibbs=3000
nburn=ngibbs/2
nburn=ngibbs/2
mod=hmm.main.function(dat=dat,var.mu=var.mu,sig2.a=sig2.a,sig2.b=sig2.b,
gamma1=gamma1,max.group=max.group,
ngibbs=ngibbs,nburn=nburn)
warnings()
rm(list=ls(all=TRUE))
set.seed(1)
#import data
setwd('U:\\GIT_models\\hmm_armadillo')
source('gibbs hmm aux functions.R')
source('gibbs hmm main function.R')
dat=read.csv('fake data.csv',as.is=T)
nobs=nrow(dat)
#priors
var.mu=100
sig2.a=0.1; sig2.b=0.1
gamma1=0.1
#initialize parameters
max.group=10
#MCMC stuff
ngibbs=3000
nburn=ngibbs/2
nburn=ngibbs/2
nobs=nrow(dat)
#initialize parameters
mu.sk=mu.ak=rep(0,max.group)
sig2.ak=sig2.sk=rep(1,max.group)
z.k=rep(1:max.group,each=nobs/max.group)
theta=rep(1/max.group,max.group)
n.k=get.nk(z.k=z.k,max.group=max.group)
#MCMC stuff
store.mu.ak=store.mu.sk=
store.sig2.ak=store.sig2.sk=
store.theta=matrix(NA,ngibbs,max.group)
store.llk=matrix(NA,ngibbs,1)
mu.ak=sample.mu.ak(TA=dat$logit.TA,sig2.ak=sig2.ak,n.k=n.k,
z.k=z.k,max.group=max.group,var.mu=var.mu)
length(z.k)
length(TA)
dim(dat)
z.k=sample(1:max.group,size=nobs,replace=T)
nobs=nrow(dat)
#initialize parameters
mu.sk=mu.ak=rep(0,max.group)
sig2.ak=sig2.sk=rep(1,max.group)
z.k=sample(1:max.group,size=nobs,replace=T)
theta=rep(1/max.group,max.group)
n.k=get.nk(z.k=z.k,max.group=max.group)
#MCMC stuff
store.mu.ak=store.mu.sk=
store.sig2.ak=store.sig2.sk=
store.theta=matrix(NA,ngibbs,max.group)
store.llk=matrix(NA,ngibbs,1)
mu.ak=sample.mu.ak(TA=dat$logit.TA,sig2.ak=sig2.ak,n.k=n.k,
z.k=z.k,max.group=max.group,var.mu=var.mu)
mu.ak
mu.sk=sample.mu.sk(SL=dat$log.SL,sig2.sk=sig2.sk,n.k=n.k,
z.k=z.k,max.group=max.group,var.mu=var.mu)
sig2.ak=sample.sig2.ak(TA=dat$logit.TA,n.k=n.k,sig2.a=sig2.a,sig2.b=sig2.b,
mu.ak=mu.ak,max.group=max.group,z.k=z.k)
sig2.sk=sample.sig2.sk(SL=dat$log.SL,n.k=n.k,sig2.a=sig2.a,sig2.b=sig2.b,
mu.sk=mu.sk,max.group=max.group,z.k=z.k)
z.k=sample.z(TA=dat$logit.TA,SL=dat$log.SL,ltheta=log(theta),
mu.ak=mu.ak,mu.sk=mu.sk,sig2.ak=sig2.ak,sig2.sk=sig2.sk,
z.k=z.k,max.group=max.group,nobs=nobs,var.mu=var.mu)
mu.sk
sig2.ak
sig2.sk
z.k
n.k=get.nk(z.k=z.k,max.group=max.group)
theta=sample.theta(n.k=n.k,gamma1=gamma1,max.group=max.group)
rm(list=ls(all=TRUE))
set.seed(1)
#import data
setwd('U:\\GIT_models\\hmm_armadillo')
source('gibbs hmm aux functions.R')
source('gibbs hmm main function.R')
dat=read.csv('fake data.csv',as.is=T)
nobs=nrow(dat)
#priors
var.mu=100
sig2.a=0.1; sig2.b=0.1
gamma1=0.1
#initialize parameters
max.group=10
#MCMC stuff
ngibbs=3000
nburn=ngibbs/2
nburn=ngibbs/2
mod=hmm.main.function(dat=dat,var.mu=var.mu,sig2.a=sig2.a,sig2.b=sig2.b,
gamma1=gamma1,max.group=max.group,
ngibbs=ngibbs,nburn=nburn)
