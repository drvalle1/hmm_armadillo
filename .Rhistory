mu.ak=mu.ak[ind]
mu.sk=mu.sk[ind]
sig2.sk=sig2.sk[ind]
sig2.ak=sig2.ak[ind]
ztmp=z.k
for (jj in 1:max.group){
cond=z.k==ind[jj]
ztmp[cond]=jj
}
z.k=ztmp
n.k=get.nk(z.k=z.k,max.group=max.group)
}
#get log.likel
llk=calc.llk(TA=dat$logit.TA,SL=dat$log.SL,z.k=z.k,
mu.sk=mu.sk,mu.ak=mu.ak,sig2.ak=sig2.ak,
sig2.sk=sig2.sk,max.group=max.group)
#store results
store.mu.ak[i,]=mu.ak
store.mu.sk[i,]=mu.sk
store.sig2.ak[i,]=sig2.ak
store.sig2.sk[i,]=sig2.sk
store.theta[i,]=theta
store.llk[i]=sum(llk)
# store.z[i,]=z
}
rm(list=ls(all=TRUE))
set.seed(1)
#import data
setwd('U:\\GIT_models\\hmm_armadillo')
source('gibbs hmm aux functions.R')
dat=read.csv('fake data.csv',as.is=T)
nobs=nrow(dat)
#priors
var.mu=100
sig2.a=0.1; sig2.b=0.1
gamma1=0.1
#initialize parameters
max.group=10
mu.sk=mu.ak=rep(0,max.group)
sig2.ak=sig2.sk=rep(1,max.group)
z.k=rep(1:max.group,each=nobs/max.group)
theta=rep(1/max.group,max.group)
n.k=get.nk(z.k=z.k,max.group=max.group)
#MCMC stuff
ngibbs=10000
nburn=ngibbs/2
store.mu.ak=store.mu.sk=
store.sig2.ak=store.sig2.sk=
store.theta=matrix(NA,ngibbs,max.group)
store.z=matrix(NA,ngibbs,nobs)
store.llk=matrix(NA,ngibbs,1)
for (i in 1:ngibbs){
print(i)
print(max(z.k))
mu.ak=sample.mu.ak(TA=dat$logit.TA,sig2.ak=sig2.ak,n.k=n.k,
z.k=z.k,max.group=max.group)
mu.sk=sample.mu.sk(SL=dat$log.SL,sig2.sk=sig2.sk,n.k=n.k,
z.k=z.k,max.group=max.group)
sig2.ak=sample.sig2.ak(TA=dat$logit.TA,n.k=n.k,sig2.a=sig2.a,sig2.b=sig2.b,
mu.ak=mu.ak,max.group=max.group,z.k=z.k)
sig2.sk=sample.sig2.sk(SL=dat$log.SL,n.k=n.k,sig2.a=sig2.a,sig2.b=sig2.b,
mu.sk=mu.sk,max.group=max.group,z.k=z.k)
z.k=sample.z(TA=dat$logit.TA,SL=dat$log.SL,ltheta=log(theta),
mu.ak=mu.ak,mu.sk=mu.sk,sig2.ak=sig2.ak,sig2.sk=sig2.sk,
z.k=z.k,max.group=max.group,nobs=nobs)
n.k=get.nk(z.k=z.k,max.group=max.group)
theta=sample.theta(n.k=n.k,gamma1=gamma1,max.group=max.group)
#re-order stuff from time to time
if (i%%50==0 & i<nburn){
ind=order(theta,decreasing=T)
theta=theta[ind]
mu.ak=mu.ak[ind]
mu.sk=mu.sk[ind]
sig2.sk=sig2.sk[ind]
sig2.ak=sig2.ak[ind]
ztmp=z.k
for (jj in 1:max.group){
cond=z.k==ind[jj]
ztmp[cond]=jj
}
z.k=ztmp
n.k=get.nk(z.k=z.k,max.group=max.group)
}
#get log.likel
llk=calc.llk(TA=dat$logit.TA,SL=dat$log.SL,z.k=z.k,
mu.sk=mu.sk,mu.ak=mu.ak,sig2.ak=sig2.ak,
sig2.sk=sig2.sk,max.group=max.group)
#store results
store.mu.ak[i,]=mu.ak
store.mu.sk[i,]=mu.sk
store.sig2.ak[i,]=sig2.ak
store.sig2.sk[i,]=sig2.sk
store.theta[i,]=theta
store.llk[i]=sum(llk)
# store.z[i,]=z
}
rm(list=ls(all=TRUE))
set.seed(1)
#import data
setwd('U:\\GIT_models\\hmm_armadillo')
source('gibbs hmm aux functions.R')
dat=read.csv('fake data.csv',as.is=T)
nobs=nrow(dat)
#priors
var.mu=100
sig2.a=0.1; sig2.b=0.1
gamma1=0.1
#initialize parameters
max.group=10
mu.sk=mu.ak=rep(0,max.group)
sig2.ak=sig2.sk=rep(1,max.group)
z.k=rep(1:max.group,each=nobs/max.group)
theta=rep(1/max.group,max.group)
n.k=get.nk(z.k=z.k,max.group=max.group)
#MCMC stuff
ngibbs=10000
nburn=ngibbs/2
store.mu.ak=store.mu.sk=
store.sig2.ak=store.sig2.sk=
store.theta=matrix(NA,ngibbs,max.group)
store.z=matrix(NA,ngibbs,nobs)
store.llk=matrix(NA,ngibbs,1)
for (i in 1:ngibbs){
print(i)
print(max(z.k))
mu.ak=sample.mu.ak(TA=dat$logit.TA,sig2.ak=sig2.ak,n.k=n.k,
z.k=z.k,max.group=max.group,var.mu=var.mu)
mu.sk=sample.mu.sk(SL=dat$log.SL,sig2.sk=sig2.sk,n.k=n.k,
z.k=z.k,max.group=max.group,var.mu=var.mu)
sig2.ak=sample.sig2.ak(TA=dat$logit.TA,n.k=n.k,sig2.a=sig2.a,sig2.b=sig2.b,
mu.ak=mu.ak,max.group=max.group,z.k=z.k)
sig2.sk=sample.sig2.sk(SL=dat$log.SL,n.k=n.k,sig2.a=sig2.a,sig2.b=sig2.b,
mu.sk=mu.sk,max.group=max.group,z.k=z.k)
z.k=sample.z(TA=dat$logit.TA,SL=dat$log.SL,ltheta=log(theta),
mu.ak=mu.ak,mu.sk=mu.sk,sig2.ak=sig2.ak,sig2.sk=sig2.sk,
z.k=z.k,max.group=max.group,nobs=nobs)
n.k=get.nk(z.k=z.k,max.group=max.group)
theta=sample.theta(n.k=n.k,gamma1=gamma1,max.group=max.group)
#re-order stuff from time to time
if (i%%50==0 & i<nburn){
ind=order(theta,decreasing=T)
theta=theta[ind]
mu.ak=mu.ak[ind]
mu.sk=mu.sk[ind]
sig2.sk=sig2.sk[ind]
sig2.ak=sig2.ak[ind]
ztmp=z.k
for (jj in 1:max.group){
cond=z.k==ind[jj]
ztmp[cond]=jj
}
z.k=ztmp
n.k=get.nk(z.k=z.k,max.group=max.group)
}
#get log.likel
llk=calc.llk(TA=dat$logit.TA,SL=dat$log.SL,z.k=z.k,
mu.sk=mu.sk,mu.ak=mu.ak,sig2.ak=sig2.ak,
sig2.sk=sig2.sk,max.group=max.group)
#store results
store.mu.ak[i,]=mu.ak
store.mu.sk[i,]=mu.sk
store.sig2.ak[i,]=sig2.ak
store.sig2.sk[i,]=sig2.sk
store.theta[i,]=theta
store.llk[i]=sum(llk)
# store.z[i,]=z
}
rm(list=ls(all=TRUE))
set.seed(1)
#import data
setwd('U:\\GIT_models\\hmm_armadillo')
source('gibbs hmm aux functions.R')
dat=read.csv('fake data.csv',as.is=T)
nobs=nrow(dat)
#priors
var.mu=100
sig2.a=0.1; sig2.b=0.1
gamma1=0.1
#initialize parameters
max.group=10
mu.sk=mu.ak=rep(0,max.group)
sig2.ak=sig2.sk=rep(1,max.group)
z.k=rep(1:max.group,each=nobs/max.group)
theta=rep(1/max.group,max.group)
n.k=get.nk(z.k=z.k,max.group=max.group)
#MCMC stuff
ngibbs=10000
nburn=ngibbs/2
store.mu.ak=store.mu.sk=
store.sig2.ak=store.sig2.sk=
store.theta=matrix(NA,ngibbs,max.group)
store.z=matrix(NA,ngibbs,nobs)
store.llk=matrix(NA,ngibbs,1)
for (i in 1:ngibbs){
print(i)
print(max(z.k))
mu.ak=sample.mu.ak(TA=dat$logit.TA,sig2.ak=sig2.ak,n.k=n.k,
z.k=z.k,max.group=max.group,var.mu=var.mu)
mu.sk=sample.mu.sk(SL=dat$log.SL,sig2.sk=sig2.sk,n.k=n.k,
z.k=z.k,max.group=max.group,var.mu=var.mu)
sig2.ak=sample.sig2.ak(TA=dat$logit.TA,n.k=n.k,sig2.a=sig2.a,sig2.b=sig2.b,
mu.ak=mu.ak,max.group=max.group,z.k=z.k)
sig2.sk=sample.sig2.sk(SL=dat$log.SL,n.k=n.k,sig2.a=sig2.a,sig2.b=sig2.b,
mu.sk=mu.sk,max.group=max.group,z.k=z.k)
z.k=sample.z(TA=dat$logit.TA,SL=dat$log.SL,ltheta=log(theta),
mu.ak=mu.ak,mu.sk=mu.sk,sig2.ak=sig2.ak,sig2.sk=sig2.sk,
z.k=z.k,max.group=max.group,nobs=nobs,var.mu=var.mu)
n.k=get.nk(z.k=z.k,max.group=max.group)
theta=sample.theta(n.k=n.k,gamma1=gamma1,max.group=max.group)
#re-order stuff from time to time
if (i%%50==0 & i<nburn){
ind=order(theta,decreasing=T)
theta=theta[ind]
mu.ak=mu.ak[ind]
mu.sk=mu.sk[ind]
sig2.sk=sig2.sk[ind]
sig2.ak=sig2.ak[ind]
ztmp=z.k
for (jj in 1:max.group){
cond=z.k==ind[jj]
ztmp[cond]=jj
}
z.k=ztmp
n.k=get.nk(z.k=z.k,max.group=max.group)
}
#get log.likel
llk=calc.llk(TA=dat$logit.TA,SL=dat$log.SL,z.k=z.k,
mu.sk=mu.sk,mu.ak=mu.ak,sig2.ak=sig2.ak,
sig2.sk=sig2.sk,max.group=max.group)
#store results
store.mu.ak[i,]=mu.ak
store.mu.sk[i,]=mu.sk
store.sig2.ak[i,]=sig2.ak
store.sig2.sk[i,]=sig2.sk
store.theta[i,]=theta
store.llk[i]=sum(llk)
# store.z[i,]=z
}
plot(theta,type='h')
compare1=function(true,estim){
rango=range(c(true,estim))
plot(true,estim,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
}
ngibbs=2726
plot(theta,type='h')
compare1=function(true,estim){
rango=range(c(true,estim))
plot(true,estim,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
}
estim.mu.ak=store.mu.ak[ngibbs,1:4]
estim.mu.sk=store.mu.sk[ngibbs,1:4]
estim.sd.sk=sqrt(store.sig2.sk[ngibbs,1:4])
estim.sd.ak=sqrt(store.sig2.ak[ngibbs,1:4])
estim.mu.ak
ngibbs=2724
estim.mu.ak=store.mu.ak[ngibbs,1:4]
estim.mu.sk=store.mu.sk[ngibbs,1:4]
estim.sd.sk=sqrt(store.sig2.sk[ngibbs,1:4])
estim.sd.ak=sqrt(store.sig2.ak[ngibbs,1:4])
estim.mu.ak
ordem=c(1,4,3,2)
par(mfrow=c(2,2))
compare1(true=mu.SL.true,estim=estim.mu.sk[ordem])
set.seed(1)
#parameters
nobs=10000
ngroup=4
mu.SL.true=mu.SL=c(-2,0,1,2)
sd.SL.true=sd.SL=c(1,0.5,0.5,0.5)
mu.TA.true=mu.TA=c(2,0.5,-1,-2)
sd.TA.true=sd.TA=c(0.3,2,0.3,0.3)
#get group assignments
tmp=rmultinom(nobs,size=1,prob=rep(1/ngroup,ngroup))
ind=rep(NA,nobs)
for (i in 1:nobs){
ind[i]=which(tmp[,i]==1)
}
#get SL
fim=data.frame(log.SL=rep(NA,nobs),
logit.TA=rep(NA,nobs))
fim$log.SL=rnorm(nobs,mean=mu.SL[ind],sd=sd.SL[ind])
#look at SL
par(mfrow=c(2,2))
rango=range(exp(fim$log.SL))
for (i in 1:ngroup) hist(exp(fim$log.SL[ind==i]),xlim=rango)
#get TA
fim$logit.TA=rnorm(nobs,mean=mu.TA[ind],sd=sd.TA[ind])
#look at TA
tmp=exp(fim$logit.TA)
prob=tmp/(1+tmp)
par(mfrow=c(2,2))
rango=c(0,1)
for (i in 1:ngroup) hist(prob[ind==i],xlim=rango)
estim.mu.ak=store.mu.ak[ngibbs,1:4]
estim.mu.sk=store.mu.sk[ngibbs,1:4]
estim.sd.sk=sqrt(store.sig2.sk[ngibbs,1:4])
estim.sd.ak=sqrt(store.sig2.ak[ngibbs,1:4])
ordem=c(1,4,3,2)
par(mfrow=c(2,2))
compare1(true=mu.SL.true,estim=estim.mu.sk[ordem])
compare1(true=mu.TA.true,estim=estim.mu.ak[ordem])
compare1(true=sd.SL.true,estim=estim.sd.sk[ordem])
compare1(true=sd.TA.true,estim=estim.sd.ak[ordem])
rm(list=ls(all=TRUE))
set.seed(1)
#parameters
nobs=10000
ngroup=4
mu.SL.true=mu.SL=c(-2,0,1,2)
sd.SL.true=sd.SL=c(1,0.5,0.5,0.5)
mu.TA.true=mu.TA=c(2,0.5,-1,-2)
sd.TA.true=sd.TA=c(0.3,2,0.3,0.3)
#get group assignments
tmp=rmultinom(nobs,size=1,prob=rep(1/ngroup,ngroup))
ind=rep(NA,nobs)
for (i in 1:nobs){
ind[i]=which(tmp[,i]==1)
}
#get SL
fim=data.frame(log.SL=rep(NA,nobs),
logit.TA=rep(NA,nobs))
fim$log.SL=rnorm(nobs,mean=mu.SL[ind],sd=sd.SL[ind])
#look at SL
par(mfrow=c(2,2))
rango=range(exp(fim$log.SL))
for (i in 1:ngroup) hist(exp(fim$log.SL[ind==i]),xlim=rango)
#get TA
fim$logit.TA=rnorm(nobs,mean=mu.TA[ind],sd=sd.TA[ind])
#look at TA
tmp=exp(fim$logit.TA)
prob=tmp/(1+tmp)
par(mfrow=c(2,2))
rango=c(0,1)
for (i in 1:ngroup) hist(prob[ind==i],xlim=rango)
head(fim)
ind=rbinom(nobs,size=1,prob=0.01)
fim[ind==1,1]=NA
ind=rbinom(nobs,size=1,prob=0.01)
fim[ind==1,2]=NA
k=apply(is.na(fim),1,sum)
table(k)
head(fim)
rm(list=ls(all=TRUE))
set.seed(1)
#parameters
nobs=10000
ngroup=4
mu.SL.true=mu.SL=c(-2,0,1,2)
sd.SL.true=sd.SL=c(1,0.5,0.5,0.5)
mu.TA.true=mu.TA=c(2,0.5,-1,-2)
sd.TA.true=sd.TA=c(0.3,2,0.3,0.3)
#get group assignments
tmp=rmultinom(nobs,size=1,prob=rep(1/ngroup,ngroup))
ind=rep(NA,nobs)
for (i in 1:nobs){
ind[i]=which(tmp[,i]==1)
}
#get SL
fim=data.frame(log.SL=rep(NA,nobs),
logit.TA=rep(NA,nobs))
fim$log.SL=rnorm(nobs,mean=mu.SL[ind],sd=sd.SL[ind])
#look at SL
par(mfrow=c(2,2))
rango=range(exp(fim$log.SL))
for (i in 1:ngroup) hist(exp(fim$log.SL[ind==i]),xlim=rango)
#get TA
fim$logit.TA=rnorm(nobs,mean=mu.TA[ind],sd=sd.TA[ind])
#look at TA
tmp=exp(fim$logit.TA)
prob=tmp/(1+tmp)
par(mfrow=c(2,2))
rango=c(0,1)
for (i in 1:ngroup) hist(prob[ind==i],xlim=rango)
#plug in NA's
ind=rbinom(nobs,size=1,prob=0.01)
fim[ind==1,1]=NA
ind=rbinom(nobs,size=1,prob=0.01)
fim[ind==1,2]=NA
k=apply(is.na(fim),1,sum)
fim1=fim[k!=2,]
#export results
setwd('U:\\GIT_models\\hmm_armadillo')
write.csv(fim1,'fake data.csv',row.names=F)
rm(list=ls(all=TRUE))
set.seed(1)
#import data
setwd('U:\\GIT_models\\hmm_armadillo')
source('gibbs hmm aux functions.R')
source('gibbs hmm main function.R')
dat=read.csv('fake data.csv',as.is=T)
nobs=nrow(dat)
#priors
var.mu=100
sig2.a=0.1; sig2.b=0.1
gamma1=0.1
#initialize parameters
max.group=10
#MCMC stuff
ngibbs=3000
nburn=ngibbs/2
nburn=ngibbs/2
rm(list=ls(all=TRUE))
set.seed(1)
#import data
setwd('U:\\GIT_models\\hmm_armadillo')
source('gibbs hmm aux functions.R')
source('gibbs hmm main function.R')
dat=read.csv('fake data.csv',as.is=T)
nobs=nrow(dat)
#priors
var.mu=100
sig2.a=0.1; sig2.b=0.1
gamma1=0.1
#initialize parameters
max.group=10
#MCMC stuff
ngibbs=3000
nburn=ngibbs/2
nburn=ngibbs/2
mod=hmm.main.function(dat=dat,var.mu=var.mu,sig2.a=sig2.a,sig2.b=sig2.b,
gamma1=gamma1,max.group=max.group,
ngibbs=ngibbs,nburn=nburn)
warnings()
rm(list=ls(all=TRUE))
set.seed(1)
#import data
setwd('U:\\GIT_models\\hmm_armadillo')
source('gibbs hmm aux functions.R')
source('gibbs hmm main function.R')
dat=read.csv('fake data.csv',as.is=T)
nobs=nrow(dat)
#priors
var.mu=100
sig2.a=0.1; sig2.b=0.1
gamma1=0.1
#initialize parameters
max.group=10
#MCMC stuff
ngibbs=3000
nburn=ngibbs/2
nburn=ngibbs/2
nobs=nrow(dat)
#initialize parameters
mu.sk=mu.ak=rep(0,max.group)
sig2.ak=sig2.sk=rep(1,max.group)
z.k=rep(1:max.group,each=nobs/max.group)
theta=rep(1/max.group,max.group)
n.k=get.nk(z.k=z.k,max.group=max.group)
#MCMC stuff
store.mu.ak=store.mu.sk=
store.sig2.ak=store.sig2.sk=
store.theta=matrix(NA,ngibbs,max.group)
store.llk=matrix(NA,ngibbs,1)
mu.ak=sample.mu.ak(TA=dat$logit.TA,sig2.ak=sig2.ak,n.k=n.k,
z.k=z.k,max.group=max.group,var.mu=var.mu)
length(z.k)
length(TA)
dim(dat)
z.k=sample(1:max.group,size=nobs,replace=T)
nobs=nrow(dat)
#initialize parameters
mu.sk=mu.ak=rep(0,max.group)
sig2.ak=sig2.sk=rep(1,max.group)
z.k=sample(1:max.group,size=nobs,replace=T)
theta=rep(1/max.group,max.group)
n.k=get.nk(z.k=z.k,max.group=max.group)
#MCMC stuff
store.mu.ak=store.mu.sk=
store.sig2.ak=store.sig2.sk=
store.theta=matrix(NA,ngibbs,max.group)
store.llk=matrix(NA,ngibbs,1)
mu.ak=sample.mu.ak(TA=dat$logit.TA,sig2.ak=sig2.ak,n.k=n.k,
z.k=z.k,max.group=max.group,var.mu=var.mu)
mu.ak
mu.sk=sample.mu.sk(SL=dat$log.SL,sig2.sk=sig2.sk,n.k=n.k,
z.k=z.k,max.group=max.group,var.mu=var.mu)
sig2.ak=sample.sig2.ak(TA=dat$logit.TA,n.k=n.k,sig2.a=sig2.a,sig2.b=sig2.b,
mu.ak=mu.ak,max.group=max.group,z.k=z.k)
sig2.sk=sample.sig2.sk(SL=dat$log.SL,n.k=n.k,sig2.a=sig2.a,sig2.b=sig2.b,
mu.sk=mu.sk,max.group=max.group,z.k=z.k)
z.k=sample.z(TA=dat$logit.TA,SL=dat$log.SL,ltheta=log(theta),
mu.ak=mu.ak,mu.sk=mu.sk,sig2.ak=sig2.ak,sig2.sk=sig2.sk,
z.k=z.k,max.group=max.group,nobs=nobs,var.mu=var.mu)
mu.sk
sig2.ak
sig2.sk
z.k
n.k=get.nk(z.k=z.k,max.group=max.group)
theta=sample.theta(n.k=n.k,gamma1=gamma1,max.group=max.group)
rm(list=ls(all=TRUE))
set.seed(1)
#import data
setwd('U:\\GIT_models\\hmm_armadillo')
source('gibbs hmm aux functions.R')
source('gibbs hmm main function.R')
dat=read.csv('fake data.csv',as.is=T)
nobs=nrow(dat)
#priors
var.mu=100
sig2.a=0.1; sig2.b=0.1
gamma1=0.1
#initialize parameters
max.group=10
#MCMC stuff
ngibbs=3000
nburn=ngibbs/2
nburn=ngibbs/2
mod=hmm.main.function(dat=dat,var.mu=var.mu,sig2.a=sig2.a,sig2.b=sig2.b,
gamma1=gamma1,max.group=max.group,
ngibbs=ngibbs,nburn=nburn)
